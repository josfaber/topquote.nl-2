#!/bin/bash

REMOTE_USER=root
REMOTE_HOST=de.mmsrv.nl
REMOTE_PATH=/root/topquote.nl

REGISTRY_URL="registry.mmsrv.nl"

dev() {
    docker compose \
        -f docker-compose.yml \
        -f docker-compose.override.yml \
        up -d --force-recreate --build
}

stopdev() {
    docker compose \
        -f docker-compose.yml \
        -f docker-compose.override.yml \
        down --remove-orphans
}

console() {
    docker compose exec -it php bash
}

compile() {
    npm run build
    # docker run --platform linux/amd64 --rm -it \
    #     -v .:/project \
    #     -w /project \
    #     --tmpfs /project/node_modules \
    #     node:20-slim sh -c "npm i && npm run build"
}

build() {
    docker buildx build --platform linux/amd64 --tag ${REGISTRY_URL}/topquote-php:latest --push ./app
    docker buildx build --platform linux/amd64 --tag ${REGISTRY_URL}/topquote-nginx:latest --push ./nginx 
}

clear_remote_caches() {
    ssh "$REMOTE_USER"@$REMOTE_HOST "docker exec topquote-php bash -c find /var/www/cache /var/www/templates/cache -mindepth 1 -exec rm -rf {} +"
    ssh "$REMOTE_USER"@$REMOTE_HOST "docker exec topquote-php bash -c chmod -R 777 /var/www/cache /var/www/templates/cache"
}

deploy() {
    # exit on errors
    set -e
    # ask to create image 
    read -p "Do you want to create a new docker image? (y/n) " -n 1 -r
    echo
    # compile assets
    compile
    # build images
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        build
        sleep 5
    fi
    # pull new images on production server
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        ssh "$REMOTE_USER"@$REMOTE_HOST "cd $REMOTE_PATH && docker pull registry.mmsrv.nl/topquote-nginx:latest && docker pull registry.mmsrv.nl/topquote-php:latest"
        sleep 2
    fi
    # bring down production
    ssh "$REMOTE_USER"@$REMOTE_HOST "cd $REMOTE_PATH && docker compose -f docker-compose.yml -f docker-compose.prod.yml down --remove-orphans"
    # first time 
    ssh "$REMOTE_USER"@$REMOTE_HOST mkdir -p $REMOTE_PATH/app
    # copy files
    scp docker-compose{.prod.yml,.yml} "$REMOTE_USER"@$REMOTE_HOST:$REMOTE_PATH/
    scp .env.production "$REMOTE_USER"@$REMOTE_HOST:$REMOTE_PATH/.env
    # upload new code
    rsync -rz -e ssh app/ "$REMOTE_USER"@$REMOTE_HOST:$REMOTE_PATH/app/ --exclude 'public/sitemap*'  --delete
    # bring up production
    ssh "$REMOTE_USER"@$REMOTE_HOST "cd $REMOTE_PATH && docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d"
    sleep 10
    # continue on errors 
    set +e
    # clear caches
    clear_remote_caches
    sleep 5
    # generate sitemap
    ssh "$REMOTE_USER"@$REMOTE_HOST "cd $REMOTE_PATH && rm -rf app/public/sitemap*"
    ssh "$REMOTE_USER"@$REMOTE_HOST "cd $REMOTE_PATH && docker compose -f docker-compose.yml -f docker-compose.prod.yml exec php php /var/www/bin/sitemap.php" 
}

dbdump() {
    # docker exec topquote-mysql sh -c 'exec mysqldump --all-databases -uroot -p"$MYSQL_ROOT_PASSWORD"' > dump.sql
    WORK_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    cd $WORK_DIR
    TIMESTAMP=$(date +%Y%m%d%H%M%S)
    set -o allexport
    source .env
    set +o allexport
    BACKUP_DIR="${WORK_DIR}/mount/backups/db"
    mkdir -p ${BACKUP_DIR}
    BACKUP_FILE_NAME="${BACKUP_DIR}/${DB_NAME}-${TIMESTAMP}.sql"
    docker exec topquote-db bash -c \
        "exec mysqldump --no-create-db -h"db" -u"${DB_USER}" -p"${DB_PASSWORD}" ${DB_NAME}" > ${BACKUP_FILE_NAME};
}


# Check if a command is provided as an argument
if [ $# -eq 1 ]; then
    command="$1"
    shift
    case "$command" in
        "dev")
            dev
            ;;
        "stopdev")
            stopdev
            ;;
        "console")
            console
            ;;
        "dbdump")
            dbdump
            ;;
        "clear_remote_caches")
            clear_remote_caches
            ;;
        "build")
            build
            ;;
        "compile")
            compile
            ;;
        "deploy")
            deploy
            ;;
        *)
            echo "Invalid command: $command"
            ;;
    esac
else
    # Display the list of available commands with explanations
    echo "Available commands"
    echo "----------------------"
    echo "  ./run dev                   - Start local development"
    echo "  ./run stopdev               - Stop local development"
    echo "  ./run console               - Run console in container"
    echo "  ./run dbdump                - Create a database dump"
    echo "  ./run compile               - Compile assets"
    echo "  ./run build                 - Build, tag and push Docker images to the registry"
    echo "  ./run deploy                - Build, tag, push, pull and start containers on the production server"
    echo "  ./run clear_remote_caches   - Clear production caches"
fi
